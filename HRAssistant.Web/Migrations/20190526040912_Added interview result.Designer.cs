// <auto-generated />
using System;
using HRAssistant.Web.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HRAssistant.Web.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20190526040912_Added interview result")]
    partial class Addedinterviewresult
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview5.19227.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HRAssistant.Web.Domain.CandidateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.ToTable("Candidate");
                });

            modelBuilder.Entity("HRAssistant.Web.Domain.CityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("City");
                });

            modelBuilder.Entity("HRAssistant.Web.Domain.FormEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("Form");
                });

            modelBuilder.Entity("HRAssistant.Web.Domain.FormSagaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("InterviewId");

                    b.HasKey("Id");

                    b.ToTable("FormSaga");
                });

            modelBuilder.Entity("HRAssistant.Web.Domain.InterviewEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CandidateId");

                    b.Property<Guid?>("FormSagaId");

                    b.Property<Guid>("ResultId");

                    b.Property<int>("Status");

                    b.Property<Guid>("VacancyId");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId")
                        .IsUnique();

                    b.HasIndex("FormSagaId")
                        .IsUnique()
                        .HasFilter("[FormSagaId] IS NOT NULL");

                    b.HasIndex("ResultId")
                        .IsUnique();

                    b.HasIndex("VacancyId");

                    b.ToTable("Interview");
                });

            modelBuilder.Entity("HRAssistant.Web.Domain.InterviewResultEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CorrectAnswersCount");

                    b.Property<int>("IncorrectAnswersCount");

                    b.HasKey("Id");

                    b.ToTable("InterviewResult");
                });

            modelBuilder.Entity("HRAssistant.Web.Domain.JobPositionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("TemplateId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId")
                        .IsUnique();

                    b.ToTable("JobPosition");
                });

            modelBuilder.Entity("HRAssistant.Web.Domain.OptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsCorrect");

                    b.Property<Guid>("QuestionId");

                    b.Property<Guid?>("SelectQuestionSagaEntityId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectQuestionSagaEntityId");

                    b.ToTable("Option");
                });

            modelBuilder.Entity("HRAssistant.Web.Domain.QuestionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<Guid?>("FormId");

                    b.Property<int>("MaxAnswerSeconds");

                    b.Property<int>("OrderIndex");

                    b.Property<Guid?>("TemplateId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("TemplateId");

                    b.ToTable("Question");

                    b.HasDiscriminator<string>("Discriminator").HasValue("QuestionEntity");
                });

            modelBuilder.Entity("HRAssistant.Web.Domain.QuestionSagaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<DateTime?>("EndUtcTime");

                    b.Property<Guid?>("FormSagaId");

                    b.Property<Guid>("QuestionId");

                    b.Property<bool?>("Result");

                    b.Property<DateTime?>("StartUtcTime");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("FormSagaId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionSaga");

                    b.HasDiscriminator<string>("Discriminator").HasValue("QuestionSagaEntity");
                });

            modelBuilder.Entity("HRAssistant.Web.Domain.TeamEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CityId");

                    b.Property<bool>("IsBlocked");

                    b.Property<Guid>("TeamLeadId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("TeamLeadId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("HRAssistant.Web.Domain.TemplateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("Template");
                });

            modelBuilder.Entity("HRAssistant.Web.Domain.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsBlocked");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<int>("Role");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("HRAssistant.Web.Domain.VacancyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CandidateRequirements");

                    b.Property<Guid>("FormId");

                    b.Property<Guid>("JobPositionId");

                    b.Property<int>("JobsNumber");

                    b.Property<decimal?>("Salary");

                    b.Property<int>("Status");

                    b.Property<Guid>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("FormId")
                        .IsUnique();

                    b.HasIndex("JobPositionId");

                    b.HasIndex("TeamId");

                    b.ToTable("Vacancy");
                });

            modelBuilder.Entity("HRAssistant.Web.Domain.GeneralQuestionEntity", b =>
                {
                    b.HasBaseType("HRAssistant.Web.Domain.QuestionEntity");

                    b.HasDiscriminator().HasValue("GeneralQuestionEntity");
                });

            modelBuilder.Entity("HRAssistant.Web.Domain.InputQuestionEntity", b =>
                {
                    b.HasBaseType("HRAssistant.Web.Domain.QuestionEntity");

                    b.Property<string>("CorrectAnswer");

                    b.HasDiscriminator().HasValue("InputQuestionEntity");
                });

            modelBuilder.Entity("HRAssistant.Web.Domain.SelectQuestionEntity", b =>
                {
                    b.HasBaseType("HRAssistant.Web.Domain.QuestionEntity");

                    b.Property<bool>("OneCorrectAnswer");

                    b.HasDiscriminator().HasValue("SelectQuestionEntity");
                });

            modelBuilder.Entity("HRAssistant.Web.Domain.GeneralQuestionSagaEntity", b =>
                {
                    b.HasBaseType("HRAssistant.Web.Domain.QuestionSagaEntity");

                    b.Property<string>("Answer");

                    b.HasDiscriminator().HasValue("GeneralQuestionSagaEntity");
                });

            modelBuilder.Entity("HRAssistant.Web.Domain.InputQuestionSagaEntity", b =>
                {
                    b.HasBaseType("HRAssistant.Web.Domain.QuestionSagaEntity");

                    b.Property<string>("Answer")
                        .HasColumnName("InputQuestionSagaEntity_Answer");

                    b.HasDiscriminator().HasValue("InputQuestionSagaEntity");
                });

            modelBuilder.Entity("HRAssistant.Web.Domain.SelectQuestionSagaEntity", b =>
                {
                    b.HasBaseType("HRAssistant.Web.Domain.QuestionSagaEntity");

                    b.HasDiscriminator().HasValue("SelectQuestionSagaEntity");
                });

            modelBuilder.Entity("HRAssistant.Web.Domain.InterviewEntity", b =>
                {
                    b.HasOne("HRAssistant.Web.Domain.CandidateEntity", "Candidate")
                        .WithOne("Interview")
                        .HasForeignKey("HRAssistant.Web.Domain.InterviewEntity", "CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRAssistant.Web.Domain.FormSagaEntity", "FormSagaEntity")
                        .WithOne("Interview")
                        .HasForeignKey("HRAssistant.Web.Domain.InterviewEntity", "FormSagaId");

                    b.HasOne("HRAssistant.Web.Domain.InterviewResultEntity", "Result")
                        .WithOne("Interview")
                        .HasForeignKey("HRAssistant.Web.Domain.InterviewEntity", "ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRAssistant.Web.Domain.VacancyEntity", "Vacancy")
                        .WithMany("Interviews")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HRAssistant.Web.Domain.JobPositionEntity", b =>
                {
                    b.HasOne("HRAssistant.Web.Domain.TemplateEntity", "Template")
                        .WithOne("JobPosition")
                        .HasForeignKey("HRAssistant.Web.Domain.JobPositionEntity", "TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HRAssistant.Web.Domain.OptionEntity", b =>
                {
                    b.HasOne("HRAssistant.Web.Domain.SelectQuestionEntity", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRAssistant.Web.Domain.SelectQuestionSagaEntity", null)
                        .WithMany("SelectedOptions")
                        .HasForeignKey("SelectQuestionSagaEntityId");
                });

            modelBuilder.Entity("HRAssistant.Web.Domain.QuestionEntity", b =>
                {
                    b.HasOne("HRAssistant.Web.Domain.FormEntity", "Form")
                        .WithMany("Questions")
                        .HasForeignKey("FormId");

                    b.HasOne("HRAssistant.Web.Domain.TemplateEntity", "Template")
                        .WithMany("Questions")
                        .HasForeignKey("TemplateId");
                });

            modelBuilder.Entity("HRAssistant.Web.Domain.QuestionSagaEntity", b =>
                {
                    b.HasOne("HRAssistant.Web.Domain.FormSagaEntity", "FormSaga")
                        .WithMany("Questions")
                        .HasForeignKey("FormSagaId");

                    b.HasOne("HRAssistant.Web.Domain.QuestionEntity", "Question")
                        .WithMany("Sagas")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HRAssistant.Web.Domain.TeamEntity", b =>
                {
                    b.HasOne("HRAssistant.Web.Domain.CityEntity", "City")
                        .WithMany("Teams")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRAssistant.Web.Domain.UserEntity", "TeamLead")
                        .WithMany("TeamLeadTeams")
                        .HasForeignKey("TeamLeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HRAssistant.Web.Domain.VacancyEntity", b =>
                {
                    b.HasOne("HRAssistant.Web.Domain.FormEntity", "Form")
                        .WithOne("Vacancy")
                        .HasForeignKey("HRAssistant.Web.Domain.VacancyEntity", "FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRAssistant.Web.Domain.JobPositionEntity", "JobPosition")
                        .WithMany("Vacancies")
                        .HasForeignKey("JobPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRAssistant.Web.Domain.TeamEntity", "Team")
                        .WithMany("Vacancies")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
