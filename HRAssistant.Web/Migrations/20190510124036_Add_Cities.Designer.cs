// <auto-generated />
using System;
using HRAssistant.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HRAssistant.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20190510124036_Add_Cities")]
    partial class Add_Cities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HRAssistant.Domain.JobPositionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("TemplateId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId")
                        .IsUnique();

                    b.ToTable("JobPosition");
                });

            modelBuilder.Entity("HRAssistant.Domain.OptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsCorrect");

                    b.Property<Guid>("QuestionId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Option");
                });

            modelBuilder.Entity("HRAssistant.Domain.QuestionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("OrderIndex");

                    b.Property<Guid>("TemplateId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("Question");

                    b.HasDiscriminator<string>("Discriminator").HasValue("QuestionEntity");
                });

            modelBuilder.Entity("HRAssistant.Domain.TemplateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("Template");
                });

            modelBuilder.Entity("HRAssistant.Domain.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsBlocked");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<int>("Role");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("HRAssistant.Web.Domain.CityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("City");
                });

            modelBuilder.Entity("HRAssistant.Domain.GeneralQuestionEntity", b =>
                {
                    b.HasBaseType("HRAssistant.Domain.QuestionEntity");


                    b.ToTable("GeneralQuestion");

                    b.HasDiscriminator().HasValue("GeneralQuestionEntity");
                });

            modelBuilder.Entity("HRAssistant.Domain.InputQuestionEntity", b =>
                {
                    b.HasBaseType("HRAssistant.Domain.QuestionEntity");

                    b.Property<string>("CorrectAnswer");

                    b.ToTable("InputQuestionEntity");

                    b.HasDiscriminator().HasValue("InputQuestionEntity");
                });

            modelBuilder.Entity("HRAssistant.Domain.SelectQuestionEntity", b =>
                {
                    b.HasBaseType("HRAssistant.Domain.QuestionEntity");

                    b.Property<bool>("OneCorrectAnswer");

                    b.ToTable("SelectQuestionEntity");

                    b.HasDiscriminator().HasValue("SelectQuestionEntity");
                });

            modelBuilder.Entity("HRAssistant.Domain.JobPositionEntity", b =>
                {
                    b.HasOne("HRAssistant.Domain.TemplateEntity", "Template")
                        .WithOne("JobPosition")
                        .HasForeignKey("HRAssistant.Domain.JobPositionEntity", "TemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HRAssistant.Domain.OptionEntity", b =>
                {
                    b.HasOne("HRAssistant.Domain.SelectQuestionEntity", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HRAssistant.Domain.QuestionEntity", b =>
                {
                    b.HasOne("HRAssistant.Domain.TemplateEntity", "Template")
                        .WithMany("Questions")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
